/*
 * Freelane parser by @neebimnemozg
 */
package techport;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.text.html.parser.Parser;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.htmlparser.filters.NodeClassFilter;
import org.htmlparser.tags.LinkTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;
import org.jsoup.Connection;
import org.jsoup.Connection.Method;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author ksmirnov
 */
public class Freelance extends javax.swing.JFrame {

    /**
     * Creates new form Freelance_parse
     */
    public Freelance() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Freelance Parser");

        jToggleButton1.setText("Старт!");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jTextField2.setText("https://youdo.com/tasks-all-any-all");
        jTextField2.setToolTipText("");

        jTextField3.setText("D://");

        jLabel1.setText("Сохранить в");

        jLabel2.setText("Ссылка");
        jLabel2.setToolTipText("");

        jLabel3.setText("Сайт");
        jLabel3.setToolTipText("");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Youdo.com", "Fl.ru", "Freelance.ua", "Remontnik.ru", "Freelance.ru" }));

        jTextField4.setText("10");

        jLabel5.setText("Ограничение кол-ва страниц");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jToggleButton1))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(13, 13, 13)
                .addComponent(jToggleButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        ExecutorService service = Executors.newSingleThreadExecutor();
        String timeStamp = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
        service.submit(new Runnable() {
            public void run() {
                jToggleButton1.setSelected(false);
                if (jComboBox1.getSelectedItem().toString() == "Freelance.ua") {
                    Freelanceua();
                } else if (jComboBox1.getSelectedItem().toString() == "Youdo.com") {
                    Youdocom();
                } else if (jComboBox1.getSelectedItem().toString() == "Remontnik.ru") {
                    Remontnikru();
                } else if (jComboBox1.getSelectedItem().toString() == "Freelance.ru") {
                    Freelanceru();
                } else if (jComboBox1.getSelectedItem().toString() == "Fl.ru") {
                    Flru();
                } else {
                    JOptionPane.showMessageDialog(null, "Please, choose site");
                }
                JOptionPane.showMessageDialog(null, "File saved to: " + jTextField3.getText() + jComboBox1.getSelectedItem().toString() + " " + jTextField2.getText().replaceAll(".*/", "") + " " + timeStamp + " parse.xls");
            }
        });
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */


 /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Freelance().setVisible(true);
            }
        });
    }

    public static List<String> getLinksOnPage(final String url) throws ParserException {

        final List<String> result = new LinkedList<String>();

        final org.htmlparser.Parser htmlParser = new org.htmlparser.Parser(url);

        try {
            final NodeList tagNodeList = htmlParser.extractAllNodesThatMatch(new NodeClassFilter(LinkTag.class));
            for (int j = 0; j < tagNodeList.size(); j++) {
                final LinkTag loopLink = (LinkTag) tagNodeList.elementAt(j);
                final String loopLinkStr = loopLink.getLink();
                result.add(loopLinkStr);
            }
        } catch (ParserException e) {
            e.printStackTrace(); // TODO handle error
        }

        return result;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private void Freelanceua() {
        String PAGE = jTextField2.getText();
        int x = 0;
        String timeStamp = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
        String FILE_NAME = jTextField3.getText() + jComboBox1.getSelectedItem().toString() + " " + jTextField2.getText().replaceAll(".*/", "") + " " + timeStamp + " parse.xls";
        Workbook book = new HSSFWorkbook();
        Sheet offers = book.createSheet(timeStamp);
        ArrayList<String> descs = new ArrayList<String>();
        ArrayList<String> conds = new ArrayList<String>();
        Row offerstitle = offers.createRow(0);
        Cell title = offerstitle.createCell(0);
        title.setCellValue("Link");
        Row offerstitle1 = offers.getRow(0);
        Cell title1 = offerstitle1.createCell(1);
        title1.setCellValue("Offer name");
        Row offerstitle2 = offers.getRow(0);
        Cell title2 = offerstitle2.createCell(2);
        title2.setCellValue("Description");
        Row offerstitle3 = offers.getRow(0);
        Cell title3 = offerstitle3.createCell(3);
        title3.setCellValue("Price");
        Row offerstitle4 = offers.getRow(0);
        Cell title4 = offerstitle4.createCell(4);
        title4.setCellValue("Region");
        Row offerstitle5 = offers.getRow(0);
        Cell title5 = offerstitle5.createCell(5);
        title5.setCellValue("Category");
        if (jTextField4.getText().isEmpty()) {
            try {
                Elements condition = Jsoup.connect(PAGE).get().getElementsByClass("j-pgn-page");
                conds.clear();
                for (Element c : condition) {
                    if (!"»".contains(c.text())) {
                        x = Integer.valueOf(c.text());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            int y = Integer.valueOf(jTextField4.getText());
            x = y + 1;
        }
        System.out.println(x);
        for (int k = 1; k < x; k++) {
            try {
                List a = getLinksOnPage(PAGE + "&page=" + k);
                //System.out.println(a.get(1).toString());
                for (int i = 0; i < a.size(); i++) {
                    if (a.get(i).toString().contains("orders/1")) {
                        descs.add(a.get(i).toString().replace("#offers", ""));
                        //System.out.println(descs.size());
                    }
                }
                Set<String> set = new HashSet<>(descs);
                descs.clear();
                descs.addAll(set);
                for (int j = 0; j < descs.size(); j++) {
                    Row offersrow = offers.createRow((j + 1) + ((k - 1) * descs.size()));
                    System.out.println((j + 1) + ((k - 1) * descs.size()));
                    Cell name = offersrow.createCell(0);
                    name.setCellValue(descs.get(j));
                    offers.autoSizeColumn(0);
                    System.out.println(descs.get(j));
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().select("h1");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int l = 1; l <= conds.size(); l++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(1);
                            name1.setCellValue(conds.get(l - 1));
                            offers.autoSizeColumn(1);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().select("article");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int m = 1; m <= conds.size(); m++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(2);
                            name1.setCellValue(conds.get(m - 1));
                            offers.autoSizeColumn(2);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("o-project-price o-project-price_show-sm");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int n = 1; n <= conds.size(); n++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(3);
                            name1.setCellValue(conds.get(n - 1));
                            offers.autoSizeColumn(3);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("fa fa-map-marker");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.parent().toString().replace("<li><i class=\"fa fa-map-marker\"></i> ", "").replace("</li>", ""));
                            System.out.println(c.parent().toString().replace("<li><i class=\"fa fa-map-marker\"></i> ", "").replace("</li>", ""));
                        }
                        for (int n = 1; n <= conds.size(); n++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(4);
                            name1.setCellValue(conds.get(n - 1));
                            offers.autoSizeColumn(4);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().select("li");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                        }
                        System.out.println(conds.get(7));
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(5);
                        name1.setCellValue(conds.get(7));
                        offers.autoSizeColumn(5);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                descs.clear();

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
                book.write(outputStream);
                book.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void Youdocom() {
        String PAGE = jTextField2.getText();
        int x = 0;
        String timeStamp = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
        String FILE_NAME = jTextField3.getText() + jComboBox1.getSelectedItem().toString() + " " + jTextField2.getText().replaceAll(".*/", "") + " " + timeStamp + " parse.xls";
        Workbook book = new HSSFWorkbook();
        Sheet offers = book.createSheet(timeStamp);
        ArrayList<String> descs = new ArrayList<String>();
        ArrayList<String> conds = new ArrayList<String>();
        Row offerstitle = offers.createRow(0);
        Cell title = offerstitle.createCell(0);
        title.setCellValue("Link");
        Row offerstitle1 = offers.getRow(0);
        Cell title1 = offerstitle1.createCell(1);
        title1.setCellValue("Offer name");
        Row offerstitle2 = offers.getRow(0);
        Cell title2 = offerstitle2.createCell(2);
        title2.setCellValue("Description");
        Row offerstitle3 = offers.getRow(0);
        Cell title3 = offerstitle3.createCell(3);
        title3.setCellValue("Price");
        Row offerstitle4 = offers.getRow(0);
        Cell title4 = offerstitle4.createCell(4);
        title4.setCellValue("Region");
        Row offerstitle5 = offers.getRow(0);
        Cell title5 = offerstitle5.createCell(5);
        title5.setCellValue("Category");

        if (jTextField4.getText().isEmpty()) {
            try {
                Elements condition = Jsoup.connect(PAGE).get().getElementsByClass("page-item-link");
                conds.clear();
                for (Element c : condition) {
                    if (!"…".contains(c.text())) {
                        x = Integer.valueOf(c.text());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            int y = Integer.valueOf(jTextField4.getText());
            x = y + 1;
        }
        System.out.println(x);
        for (int k = 1; k < x; k++) {
            try {
                List a = getLinksOnPage(PAGE + "-" + k);
                //System.out.println(a.get(1).toString());
                for (int i = 0; i < a.size(); i++) {
                    if (a.get(i).toString().length() == 26 && a.get(i).toString().contains("https://youdo.com/t")) {
                        //System.out.println(a.get(i));
                        descs.add(a.get(i).toString());
                        //System.out.println(descs.size());
                    }
                }
                Set<String> set = new HashSet<>(descs);
                descs.clear();
                descs.addAll(set);
                System.out.println(descs.size());
                for (int j = 0; j < descs.size(); j++) {
                    Row offersrow = offers.createRow((j + 1) + ((k - 1) * descs.size()));
                    System.out.println((j + 1) + ((k - 1) * descs.size()));
                    Cell name = offersrow.createCell(0);
                    name.setCellValue(descs.get(j));
                    offers.autoSizeColumn(0);
                    System.out.println(descs.get(j));
                    try {
                        Document doc = Jsoup.connect(descs.get(j)).get();
                        Elements condition1 = doc.select("h1");
                        conds.clear();
                        for (Element c : condition1) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int l = 1; l <= conds.size(); l++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(1);
                            name1.setCellValue(conds.get(l - 1));
                            offers.autoSizeColumn(1);
                        }
                        Elements condition2 = Jsoup.connect(descs.get(j)).get().getElementsByClass("b-task-block__info ");
                        conds.clear();
                        for (Element c : condition2) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int m = 1; m <= conds.size(); m++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(2);
                            name1.setCellValue(conds.get(m - 1));
                            offers.autoSizeColumn(2);
                        }
                        Elements condition3 = Jsoup.connect(descs.get(j)).get().getElementsByClass("js-budget-text");
                        conds.clear();
                        for (Element c : condition3) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int n = 1; n <= conds.size(); n++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(3);
                            name1.setCellValue(conds.get(n - 1));
                            offers.autoSizeColumn(3);
                        }
                        Elements condition4 = Jsoup.connect(descs.get(j)).get().select("title");
                        conds.clear();
                        for (Element c : condition4) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        for (int n = 1; n <= conds.size(); n++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(4);
                            name1.setCellValue(conds.get(n - 1).replaceAll(".*, г. ", ""));
                            offers.autoSizeColumn(4);
                            System.out.println(conds.get(n - 1).replaceAll(".*, г. ", ""));
                        }
                        Elements condition5 = Jsoup.connect(descs.get(j)).get().select("li");
                        conds.clear();
                        for (Element c : condition5) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        System.out.println(conds.get(15));
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(5);
                        name1.setCellValue(conds.get(15));
                        offers.autoSizeColumn(5);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                descs.clear();

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
                book.write(outputStream);
                book.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void Remontnikru() {
        String PAGE = jTextField2.getText();
        int x = 0;
        String timeStamp = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
        String FILE_NAME = jTextField3.getText() + jComboBox1.getSelectedItem().toString() + " " + jTextField2.getText().replaceAll(".*/", "") + " " + timeStamp + " parse.xls";
        Workbook book = new HSSFWorkbook();
        Sheet offers = book.createSheet(timeStamp);
        ArrayList<String> descs = new ArrayList<String>();
        ArrayList<String> conds = new ArrayList<String>();
        Row offerstitle = offers.createRow(0);
        Cell title = offerstitle.createCell(0);
        title.setCellValue("Link");
        Row offerstitle1 = offers.getRow(0);
        Cell title1 = offerstitle1.createCell(1);
        title1.setCellValue("Offer name");
        Row offerstitle2 = offers.getRow(0);
        Cell title2 = offerstitle2.createCell(2);
        title2.setCellValue("Description");
        Row offerstitle3 = offers.getRow(0);
        Cell title3 = offerstitle3.createCell(3);
        title3.setCellValue("Price");
        Row offerstitle4 = offers.getRow(0);
        Cell title4 = offerstitle4.createCell(4);
        title4.setCellValue("Region");
        Row offerstitle5 = offers.getRow(0);
        Cell title5 = offerstitle5.createCell(5);
        title5.setCellValue("Category");
        outerloop:
        if (jTextField4.getText().isEmpty()) {
            try {
                for (int i = 1; i < 999999999; i++) {
                    System.out.println(i);
                    Elements condition = Jsoup.connect(PAGE + "/?page=" + i).get().getElementsByClass("empty");
                    conds.clear();
                    for (Element c : condition) {
                        if ("В настоящее время нет заказов в этой категории".equals(c.text())) {
                            x = i - 1;
                            break outerloop;
                        }
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            int y = Integer.valueOf(jTextField4.getText());
            x = y + 1;
        }
        System.out.println(x);
        for (int k = 1; k < x; k++) {
            try {
                List a = getLinksOnPage(PAGE + "/?page=" + k);
                //System.out.println(PAGE + "/?page=" + k);
                for (int i = 0; i < a.size(); i++) {

                    if (!a.get(i).toString().contains("page") && !a.get(i).toString().contains("apps") && a.get(i).toString().matches(".*\\d.*")) {
                        //System.out.println(a.get(i));
                        descs.add(a.get(i).toString());
                        //System.out.println(descs.size());
                    }
                }
                Set<String> set = new HashSet<>(descs);
                descs.clear();
                descs.addAll(set);
                System.out.println(descs.size());
                for (int j = 0; j < descs.size(); j++) {
                    Row offersrow = offers.createRow((j + 1) + ((k - 1) * descs.size()));
                    System.out.println((j + 1) + ((k - 1) * descs.size()));
                    Cell name = offersrow.createCell(0);
                    name.setCellValue(descs.get(j));
                    offers.autoSizeColumn(0);
                    System.out.println(descs.get(j));
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().select("h1");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int l = 1; l <= conds.size(); l++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(1);
                            name1.setCellValue(conds.get(l - 1));
                            offers.autoSizeColumn(1);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("order__details");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int m = 1; m <= conds.size(); m++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(2);
                            name1.setCellValue(conds.get(m - 1));
                            offers.autoSizeColumn(2);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("lowercase");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            System.out.println(c.text());
                        }
                        for (int n = 1; n <= conds.size(); n++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(3);
                            name1.setCellValue(conds.get(n - 1));
                            offers.autoSizeColumn(3);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("location");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                        }
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(4);
                        name1.setCellValue(conds.get(0));
                        System.out.println(conds.get(0));
                        offers.autoSizeColumn(4);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().select("span");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        System.out.println(conds.get(22));
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(5);
                        name1.setCellValue(conds.get(22));
                        offers.autoSizeColumn(5);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                descs.clear();

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
                book.write(outputStream);
                book.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void Freelanceru() {
        String PAGE = jTextField2.getText();
        int x = 0;
        String timeStamp = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
        String FILE_NAME = jTextField3.getText() + jComboBox1.getSelectedItem().toString() + " " + jTextField2.getText().replaceAll(".*/", "") + " " + timeStamp + " parse.xls";
        Workbook book = new HSSFWorkbook();
        Sheet offers = book.createSheet(timeStamp);
        ArrayList<String> descs = new ArrayList<String>();
        ArrayList<String> conds = new ArrayList<String>();
        ArrayList<String> conds1 = new ArrayList<String>();
        Row offerstitle = offers.createRow(0);
        Cell title = offerstitle.createCell(0);
        title.setCellValue("Link");
        Row offerstitle1 = offers.getRow(0);
        Cell title1 = offerstitle1.createCell(1);
        title1.setCellValue("Offer name");
        Row offerstitle2 = offers.getRow(0);
        Cell title2 = offerstitle2.createCell(2);
        title2.setCellValue("Description");
        Row offerstitle3 = offers.getRow(0);
        Cell title3 = offerstitle3.createCell(3);
        title3.setCellValue("Price");
        Row offerstitle4 = offers.getRow(0);
        Cell title4 = offerstitle4.createCell(4);
        title4.setCellValue("Region");
        Row offerstitle5 = offers.getRow(0);
        Cell title5 = offerstitle5.createCell(5);
        title5.setCellValue("Category");
        Row offerstitle6 = offers.getRow(0);
        Cell title6 = offerstitle6.createCell(6);
        title6.setCellValue("Description2");
        if (jTextField4.getText().isEmpty()) {
            try {
                Elements condition = Jsoup.connect(PAGE).get().getElementsByClass("pagination pagination-default");
                conds.clear();
                for (Element c : condition) {
                    System.out.println(c.text());
                    String[] splited = c.text().split("\\s+");
                    x = Integer.valueOf(splited[splited.length - 2]);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            int y = Integer.valueOf(jTextField4.getText());
            x = y + 1;
        }
        System.out.println(x);
        for (int k = 1; k < x; k++) {
            try {
                List a = getLinksOnPage(PAGE + "&page=" + k);
                //System.out.println(PAGE + "/?page=" + k);
                for (int i = 0; i < a.size(); i++) {
                    if (a.get(i).toString().contains("projects") && !a.get(i).toString().contains("?") && a.get(i).toString().matches(".*\\d.*")) {
                        //System.out.println(a.get(i));
                        descs.add(a.get(i).toString().replace("#discussion_div", ""));
                    }
                }
                Set<String> set = new HashSet<>(descs);
                descs.clear();
                descs.addAll(set);
                System.out.println(descs.size());
                for (int j = 0; j < descs.size(); j++) {
                    Row offersrow = offers.createRow((j + 1) + ((k - 1) * descs.size()));
                    System.out.println((j + 1) + ((k - 1) * descs.size()));
                    Cell name = offersrow.createCell(0);
                    name.setCellValue(descs.get(j));
                    offers.autoSizeColumn(0);
                    System.out.println(descs.get(j));
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().select("h2");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(1);
                        if ("Реклама".equals(conds.get(0))) {
                            Elements condition1 = Jsoup.connect(descs.get(j)).get().select("h1");
                            for (Element c1 : condition1) {
                                conds.clear();
                                conds.add(c1.text());
                            }
                            name1.setCellValue(conds.get(0));
                            offers.autoSizeColumn(1);
                            System.out.println(conds.get(0));
                        } else {
                            name1.setCellValue(conds.get(0));
                            offers.autoSizeColumn(1);
                            System.out.println(conds.get(0));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("no_bottom_line");
                        //Elements condition1 = Jsoup.connect(descs.get(j)).get().getElementsByClass("td_bottom_line");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        for (int m = 1; m <= conds.size(); m++) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(2);
                            name1.setCellValue(conds.get(m - 1));
                            offers.autoSizeColumn(2);
                            System.out.println(conds.get(m - 1));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().select("td");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        if (!conds.isEmpty()) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(3);
                            name1.setCellValue(conds.get(1));
                            offers.autoSizeColumn(3);
                            System.out.println(conds.get(1));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    /*try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("location");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                        }
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(4);
                        name1.setCellValue(conds.get(0));
                        System.out.println(conds.get(0));
                        offers.autoSizeColumn(4);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }*/
                    try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("active");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        if (!conds.isEmpty()) {
                            System.out.println(conds.get(0));
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(5);
                            name1.setCellValue(conds.get(0));
                            offers.autoSizeColumn(5);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        //Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("no_bottom_line");
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("td_bottom_line");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                            //System.out.println(c.text());
                        }
                        if (!conds.isEmpty()) {
                            Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                            Cell name1 = offersrow1.createCell(6);
                            name1.setCellValue(conds.get(0));
                            offers.autoSizeColumn(6);
                            System.out.println(conds.get(0));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                descs.clear();

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
                book.write(outputStream);
                book.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void Flru() {
        String PAGE = jTextField2.getText();
        int x = 0;
        String timeStamp = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
        Workbook book = new HSSFWorkbook();
        Sheet offers = book.createSheet(timeStamp);
        ArrayList<String> descs = new ArrayList<String>();
        ArrayList<String> conds = new ArrayList<String>();
        Row offerstitle = offers.createRow(0);
        Cell title = offerstitle.createCell(0);
        title.setCellValue("Link");
        Row offerstitle1 = offers.getRow(0);
        Cell title1 = offerstitle1.createCell(1);
        title1.setCellValue("Offer name");
        Row offerstitle2 = offers.getRow(0);
        Cell title2 = offerstitle2.createCell(2);
        title2.setCellValue("Description");
        Row offerstitle3 = offers.getRow(0);
        Cell title3 = offerstitle3.createCell(3);
        title3.setCellValue("Price");
        Row offerstitle4 = offers.getRow(0);
        Cell title4 = offerstitle4.createCell(4);
        title4.setCellValue("Region");
        Row offerstitle5 = offers.getRow(0);
        Cell title5 = offerstitle5.createCell(5);
        title5.setCellValue("Category");
        if (jTextField4.getText().isEmpty()) {
            try {
                for (int i = 1; i < 52; i++) {
                    Elements condition = Jsoup.connect(PAGE + "&page=" + i).get().select("h3");
                    conds.clear();
                    for (Element c : condition) {
                        //System.out.println(c.text());
                        conds.add(c.text());
                    }
                    if (conds.size() < 10) {
                        x = i - 1;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            int y = Integer.valueOf(jTextField4.getText());
            x = y + 1;
        }
        //System.out.println(x);
        conds.clear();
        if (jTextField4.getText().equals("https://www.fl.ru/projects/")) {
            String FILE_NAME = jTextField3.getText() + jComboBox1.getSelectedItem().toString() + " " + jTextField2.getText().replaceAll(".*string=", "") + " " + timeStamp + " parse.xls";
            for (int k = 1; k <= x; k++) {
                try {
                    List a = getLinksOnPage(PAGE + "&page=" + k);
                    //System.out.println(PAGE + "&page=" + k);
                    for (int i = 0; i < a.size(); i++) {
                        if (a.get(i).toString().contains("projects") && !a.get(i).toString().contains("?") && a.get(i).toString().matches(".*\\d.*")) {
                            //System.out.println(a.get(i));
                            descs.add(a.get(i).toString());
                            //System.out.println(descs.size());
                        }
                    }
                    Set<String> set = new HashSet<>(descs);
                    descs.clear();
                    descs.addAll(set);
                    System.out.println(descs.size());
                    for (int j = 0; j < descs.size(); j++) {
                        Row offersrow = offers.createRow((j + 1) + ((k - 1) * 30));
                        System.out.println((j + 1) + ((k - 1) * 30));
                        Cell name = offersrow.createCell(0);
                        name.setCellValue(descs.get(j));
                        offers.autoSizeColumn(0);
                        System.out.println(descs.get(j));
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().select("h1");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                System.out.println(c.text());
                            }
                            for (int l = 1; l <= conds.size(); l++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 20));
                                Cell name1 = offersrow1.createCell(1);
                                name1.setCellValue(conds.get(l - 1));
                                offers.autoSizeColumn(1);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("b-layout__txt b-layout__txt_padbot_20");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                System.out.println(c.text());
                            }
                            for (int m = 1; m <= conds.size(); m++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 20));
                                Cell name1 = offersrow1.createCell(2);
                                name1.setCellValue(conds.get(m - 1));
                                offers.autoSizeColumn(2);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("b-layout__bold");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                System.out.println(c.text());
                            }
                            for (int n = 1; n <= conds.size(); n++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 20));
                                Cell name1 = offersrow1.createCell(3);
                                name1.setCellValue(conds.get(n - 1));
                                offers.autoSizeColumn(3);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        /*try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("location");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                        }
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(4);
                        name1.setCellValue(conds.get(0));
                        System.out.println(conds.get(0));
                        offers.autoSizeColumn(4);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }*/
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("b-layout__txt b-layout__txt_fontsize_11 b-layout__txt_padbot_20");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                //System.out.println(c.text());
                            }
                            for (int n = 1; n <= conds.size(); n++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 20));
                                Cell name1 = offersrow1.createCell(5);
                                name1.setCellValue(conds.get(n - 1));
                                offers.autoSizeColumn(5);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    descs.clear();

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
                    book.write(outputStream);
                    book.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } else {
            String FILE_NAME = jTextField3.getText() + jComboBox1.getSelectedItem().toString() + " " + jTextField2.getText().replaceAll(".*/", "") + " " + timeStamp + " parse.xls";
            for (int k = 1; k <= x; k++) {
                try {
                    List a = getLinksOnPage(PAGE + "?page=" + k);
                    System.out.println(PAGE + "&page=" + k);
                    for (int i = 0; i < a.size(); i++) {
                        if (a.get(i).toString().contains("projects") && !a.get(i).toString().contains("?") && a.get(i).toString().matches(".*\\d.*")) {
                            //System.out.println(a.get(i));
                            descs.add(a.get(i).toString());
                            //System.out.println(descs.size());
                        }
                    }
                    Set<String> set = new HashSet<>(descs);
                    descs.clear();
                    descs.addAll(set);
                    System.out.println(descs.size());
                    for (int j = 0; j < descs.size(); j++) {
                        Row offersrow = offers.createRow((j + 1) + ((k - 1) * 30));
                        System.out.println((j + 1) + ((k - 1) * 30));
                        Cell name = offersrow.createCell(0);
                        name.setCellValue(descs.get(j));
                        offers.autoSizeColumn(0);
                        System.out.println(descs.get(j));
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().select("h1");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                System.out.println(c.text());
                            }
                            for (int l = 1; l <= conds.size(); l++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 30));
                                Cell name1 = offersrow1.createCell(1);
                                name1.setCellValue(conds.get(l - 1));
                                offers.autoSizeColumn(1);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("b-layout__txt b-layout__txt_padbot_20");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                System.out.println(c.text());
                            }
                            for (int m = 1; m <= conds.size(); m++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 30));
                                Cell name1 = offersrow1.createCell(2);
                                name1.setCellValue(conds.get(m - 1));
                                offers.autoSizeColumn(2);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("b-layout__bold");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                System.out.println(c.text());
                            }
                            for (int n = 1; n <= conds.size(); n++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 30));
                                Cell name1 = offersrow1.createCell(3);
                                name1.setCellValue(conds.get(n - 1));
                                offers.autoSizeColumn(3);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        /*try {
                        Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("location");
                        conds.clear();
                        for (Element c : condition) {
                            conds.add(c.text());
                        }
                        Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * descs.size()));
                        Cell name1 = offersrow1.createCell(4);
                        name1.setCellValue(conds.get(0));
                        System.out.println(conds.get(0));
                        offers.autoSizeColumn(4);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }*/
                        try {
                            Elements condition = Jsoup.connect(descs.get(j)).get().getElementsByClass("b-layout__txt b-layout__txt_fontsize_11 b-layout__txt_padbot_20");
                            conds.clear();
                            for (Element c : condition) {
                                conds.add(c.text());
                                //System.out.println(c.text());
                            }
                            for (int n = 1; n <= conds.size(); n++) {
                                Row offersrow1 = offers.getRow((j + 1) + ((k - 1) * 30));
                                Cell name1 = offersrow1.createCell(5);
                                name1.setCellValue(conds.get(n - 1));
                                offers.autoSizeColumn(5);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    descs.clear();

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
                    book.write(outputStream);
                    book.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
